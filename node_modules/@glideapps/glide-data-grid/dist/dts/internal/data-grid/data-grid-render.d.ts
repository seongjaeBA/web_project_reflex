/// <reference types="react" resolution-mode="require"/>
import { type DrawHeaderCallback, type InnerGridCell, type Rectangle, GridColumnIcon, type DrawCellCallback } from "./data-grid-types.js";
import { type MappedGridColumn } from "./data-grid-lib.js";
import type { SpriteManager } from "./data-grid-sprites.js";
import { type FullTheme, type Theme } from "../../common/styles.js";
import type { GetCellRendererCallback, PrepResult } from "../../cells/cell-types.js";
import type { DrawGridArg, HoverInfo } from "./draw-grid-arg.js";
import type { EnqueueCallback } from "./use-animation-queue.js";
import type { RenderStateProvider } from "../../common/render-state-provider.js";
import type { ImageWindowLoader } from "./image-window-loader-interface.js";
import type { GridMouseGroupHeaderEventArgs } from "./event-args.js";
export interface Highlight {
    readonly color: string;
    readonly range: Rectangle;
    readonly style?: "dashed" | "solid" | "no-outline" | "solid-outline";
}
interface GroupDetails {
    readonly name: string;
    readonly icon?: string;
    readonly overrideTheme?: Partial<Theme>;
    readonly actions?: readonly {
        readonly title: string;
        readonly onClick: (e: GridMouseGroupHeaderEventArgs) => void;
        readonly icon: GridColumnIcon | string;
    }[];
}
export type GroupDetailsCallback = (groupName: string) => GroupDetails;
export type GetRowThemeCallback = (row: number) => Partial<Theme> | undefined;
export interface BlitData {
    readonly cellXOffset: number;
    readonly cellYOffset: number;
    readonly translateX: number;
    readonly translateY: number;
    readonly mustDrawFocusOnHeader: boolean;
    readonly mustDrawHighlightRingsOnHeader: boolean;
    readonly lastBuffer: "a" | "b" | undefined;
    aBufferScroll: [boolean, boolean] | undefined;
    bBufferScroll: [boolean, boolean] | undefined;
}
export declare function drawCell(ctx: CanvasRenderingContext2D, cell: InnerGridCell, col: number, row: number, isLastCol: boolean, isLastRow: boolean, x: number, y: number, w: number, h: number, highlighted: boolean, theme: FullTheme, finalCellFillColor: string, imageLoader: ImageWindowLoader, spriteManager: SpriteManager, hoverAmount: number, hoverInfo: HoverInfo | undefined, hyperWrapping: boolean, frameTime: number, drawCellCallback: DrawCellCallback | undefined, lastPrep: PrepResult | undefined, enqueue: EnqueueCallback | undefined, renderStateProvider: RenderStateProvider, getCellRenderer: GetCellRendererCallback, overrideCursor: (cursor: React.CSSProperties["cursor"]) => void): PrepResult | undefined;
export declare function getActionBoundsForGroup(box: Rectangle, actions: NonNullable<GroupDetails["actions"]>): readonly Rectangle[];
export declare function pointInRect(rect: Rectangle, x: number, y: number): boolean;
export declare function getHeaderMenuBounds(x: number, y: number, width: number, height: number, isRtl: boolean): Rectangle;
export declare function drawHeader(ctx: CanvasRenderingContext2D, x: number, y: number, width: number, height: number, c: MappedGridColumn, selected: boolean, theme: FullTheme, isHovered: boolean, hasSelectedCell: boolean, hoverAmount: number, spriteManager: SpriteManager, drawHeaderCallback: DrawHeaderCallback | undefined, touchMode: boolean): void;
export declare function drawGrid(arg: DrawGridArg, lastArg: DrawGridArg | undefined): void;
export {};
//# sourceMappingURL=data-grid-render.d.ts.map