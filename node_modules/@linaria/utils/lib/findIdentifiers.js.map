{"version":3,"file":"findIdentifiers.js","names":["_getScope","require","isInUnary","path","_path$parentPath$isUn","_path$parentPath","parentPath","isUnaryExpression","isInDelete","node","operator","isBindingIdentifier","isReferencedIdentifier","checkers","binding","ex","both","referenced","nonType","find","p","isTSTypeReference","isTSTypeQuery","isFlowType","isFlowDeclaration","isTSInterfaceDeclaration","findIdentifiers","expressions","type","identifiers","forEach","emit","removed","getScope","getBinding","name","isAncestor","push","isIdentifier","isJSXIdentifier","traverse","Identifier","JSXIdentifier"],"sources":["../src/findIdentifiers.ts"],"sourcesContent":["import type { NodePath } from '@babel/traverse';\nimport type {\n  Node,\n  Identifier,\n  JSXIdentifier,\n  UnaryExpression,\n} from '@babel/types';\n\nimport { getScope } from './getScope';\n\ntype FindType = 'binding' | 'both' | 'referenced';\n\nfunction isInUnary<T extends NodePath>(\n  path: T\n): path is T & { parentPath: NodePath<UnaryExpression> } {\n  return path.parentPath?.isUnaryExpression() ?? false;\n}\n\n// It's possible for non-strict mode code to have variable deletions.\nfunction isInDelete(path: { parentPath: NodePath<UnaryExpression> }): boolean {\n  return path.parentPath.node.operator === 'delete';\n}\n\nfunction isBindingIdentifier(path: NodePath): path is NodePath<Identifier> {\n  return path.isBindingIdentifier() && (!isInUnary(path) || isInDelete(path));\n}\n\nfunction isReferencedIdentifier(\n  path: NodePath\n): path is NodePath<Identifier | JSXIdentifier> {\n  return (\n    path.isReferencedIdentifier() || (isInUnary(path) && !isInDelete(path))\n  );\n}\n\n// For some reasons, `isBindingIdentifier` returns true for identifiers inside unary expressions.\nconst checkers: Record<FindType, (ex: NodePath) => boolean> = {\n  binding: (ex) => isBindingIdentifier(ex),\n  both: (ex) => isBindingIdentifier(ex) || isReferencedIdentifier(ex),\n  referenced: (ex) => isReferencedIdentifier(ex),\n};\n\nexport function nonType(path: NodePath): boolean {\n  return !path.find(\n    (p) =>\n      p.isTSTypeReference() ||\n      p.isTSTypeQuery() ||\n      p.isFlowType() ||\n      p.isFlowDeclaration() ||\n      p.isTSInterfaceDeclaration()\n  );\n}\n\nexport default function findIdentifiers(\n  expressions: NodePath<Node | null | undefined>[],\n  type: FindType = 'referenced'\n): NodePath<Identifier | JSXIdentifier>[] {\n  const identifiers: NodePath<Identifier | JSXIdentifier>[] = [];\n\n  expressions.forEach((ex) => {\n    const emit = (path: NodePath<Identifier | JSXIdentifier>) => {\n      if (!path.node || path.removed || !checkers[type](path)) {\n        return;\n      }\n\n      // TODO: Is there a better way to check that it's a local variable?\n\n      const binding = getScope(path).getBinding(path.node.name);\n      if (!binding) {\n        return;\n      }\n\n      if (type === 'referenced' && ex.isAncestor(binding.path)) {\n        // This identifier is declared inside the expression. We don't need it.\n        return;\n      }\n\n      identifiers.push(path);\n    };\n\n    if (ex.isIdentifier() || ex.isJSXIdentifier()) {\n      emit(ex);\n    } else {\n      ex.traverse({\n        Identifier(path: NodePath<Identifier>) {\n          emit(path);\n        },\n        JSXIdentifier(path: NodePath<JSXIdentifier>) {\n          emit(path);\n        },\n      });\n    }\n  });\n\n  return identifiers;\n}\n"],"mappings":"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"}